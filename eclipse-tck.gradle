
sourceSets {
	arq {
		java {
			srcDir project( ':micro' ).file( 'src/arq/java' )
			srcDir mpTckDir
		}
		resources {
			srcDir project( ':micro' ).file( 'src/arq/resources' )
		}
	}
}

dependencies
{
	arqImplementation 'javax.ws.rs:javax.ws.rs-api'
	arqImplementation 'javax.json.bind:javax.json.bind-api'
	arqImplementation 'javax.interceptor:javax.interceptor-api'

	arqImplementation project( ':tests:application' )
	arqImplementation project( ':tests:interfaces' )
	arqImplementation project( ':tests:shared' )
	arqImplementation 'org.eclipse.microprofile.rest.client:microprofile-rest-client-api'
	arqImplementation 'org.eclipse.microprofile.rest.client:microprofile-rest-client-tck'
	arqImplementation 'org.hamcrest:hamcrest-core'

	arqRuntime 'org.glassfish:javax.el'
	arqRuntime 'org.glassfish:javax.json'
	arqRuntime 'org.apache.geronimo.config:geronimo-config-impl'
	arqRuntime 'org.hibernate:hibernate-validator'
	arqRuntime 'org.eclipse:yasson'

	arqRuntime 'org.jboss.arquillian.container:arquillian-weld-embedded'
	arqRuntime 'org.jboss.weld.se:weld-se-core'
	arqRuntime 'org.jboss:jandex'
	arqRuntime 'com.beust:jcommander'
	arqRuntime 'commons-logging:commons-logging'
}

check.dependsOn tasks.register( 'arq', Test ) {
	group = 'verification'
	description = 'Run the TCK tests.'
	testClassesDirs = sourceSets.arq.output

	classpath = files()

	classpath += sourceSets.arq.output
	classpath += configurations.arqRuntimeClasspath

	reports {
		html.enabled = false
		junitXml.enabled = false
	}

	debug = booleanProperty( 'arq.debug' )

	useTestNG() {
		useDefaultListeners = true

		suites 'src/arq/resources/tests.xml'
	}
}

eclipse {
	classpath {
		plusConfigurations += [ configurations.arqRuntimeClasspath ]
	}
}
